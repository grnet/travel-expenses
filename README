Travel expenses backend readme


Development
===========

Follow the steps below in order to setup your development environment::

    # create and activate a virtualenv to avoid installing system-wide python packages
    $ virtualenv travelexpenses
    $ source travelexpenses/bin/activate

    # Clone the repo
    $ git clone ssh://phab-vcs-user@phab.dev.grnet.gr:222/diffusion/TRAVEL/travel-expenses-repo.git
    $ cd travel-expenses-repo

    # install backend dependencies
    (venv)$ pip install -r travelsBackend/requirements.txt

    # initialize local settings module and modify if it as needed
    (venv)$ cp travelsBackend/local_settings.py.example travelsBackend/local_settings.py
    (venv)$ vim travelsBackend/local_settings.py

    # initialize database
    (venv)$ python travelsBackend/manage.py migrate --run-syncdb

    # install frontend dependencies
    (venv)$ cd travelsFront
    (venv)$ npm install -g bower ember-cli
    (venv)$ npm install && bower install
    
    # build frontend (use watch flag to automatically trigger build on file changes)
    (venv)$ cd travelsFront && ember build [--watch] --environment=development
    
    # run the development server
    (venv)$ python travelsBackend/manage.py runserver

How to create a new Model/Form
==============================
You can easily create a new model and expose it to REST API by following the
steps below.

Firstly, you have to define your django model with your fields and their
contstraints:

```python
class MyModel(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100, unique=True)
    number = models.FloatField(blank=False)
    another_moddel = models.ForeignKey(AnotherModel)
```

Inside your model you have to specify an inner class where you define how your
model's fields will be treated by API, e.g. exposed fields, read only fields,
filter fields, ordering_fields, etc.

```python
class MyModel(models.Model):
    # Same code as above.
    
    class APITravel:
        fields = ('id', 'url', 'name', 'number') # Fields exposed to API
        read_only_fields = ('id', 'url')
        filter_fields = ('name')
```

Finally, register your API endpoint which will perform CRUD operations to your
newly created model by adding the following line to your `urls.py` file. It
calls a factory function for constructing a viewset and serializer for your
model.

```python
router_petition.register(
    r'my_model', viewset_factory(MyModel, YourCustomPermission))
```

**Note**: If you want to override the serializer methods and provide custom
implementations for your model then you can simply add your code to a new module
with the snake case name of your model inside `serializers` package. Factory
function will include them and will override custom implementation.

Don't forget to perform your schema migration after adding your model by running:
```
python manage.py makemigrations texpenses
python manage.py migrate
```
